# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  workflow_dispatch:
  #push:
    #branches: [ "master" ]
  #pull_request:
  #  types:
  #    - opened
  #  branches: [ "master" ]
  #pull_request_target:
  #  branches: [ "master" ]
  #  types:
  #    - closed
    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: goaaroregistry.azurecr.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}
 # IMAGE_NAME1: permit-api
 # IMAGE_NAME2: permit-fe
  APP: AspNetCoreWebApi6
  APP-IMAGE: aspnetcorewebapi6
  GIT_DEPLOY_REPO: dlh-dev-demoapp-manifests
  GH_TOKEN: ${{ github.token }}

  eOPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  eOPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "dlh-dev"

jobs:
  fetch:
    name: Code checkout and Sonar code scan
    #if: github.event_name == 'pull_request'
    #if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'dev')
 
    runs-on: ubuntu-latest
    #environment: 
    #  name: Dev
    steps:
    - name: Install OpenShift client
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.eOPENSHIFT_SERVER }}
        openshift_token: ${{ env.eOPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        

    - name: Install self hosted runners for actions-demo-app repository
      uses: redhat-actions/openshift-actions-runner-installer@v1
      id: install-runners 
      with: 
        github_pat: ${{ secrets.PAT }}     
        runner_image: quay.io/vishwanath_puranik/sonar-dotnet-runner    # Default: quay.io/redhat-github-actions/runner [https://quay.io/organization/redhat-github-actions]
        runner_labels: demo-runner                                    # Options: ./node-runner-14 ./java-runner-11 ./buildah-runner
        runner_replicas: 1
    - name: Echo outputs
      shell: bash
      run: |
        echo "${{ toJSON(steps.install-runners.outputs) }}"
  build: 
    name: Self Hosted Sonar scan
    
    runs-on: [ self-hosted, demo-runner ]                       # Use the same labels we gave the runner above    
    needs: fetch                           # Wait until the install-runner job above completes                

    steps:
    - name: set env variables
      run: |
          export PATH="$PATH:/root/.dotnet/tools"
          export PATH="$PATH:/home/runner/sonar-scanner-msbuild-5.10.0.59947-netcoreapp3.0"
    - name: Checkout git repository
      id: checkout1
      uses: actions/checkout@v3               
    - name: dotnet scanner                               # Checkout a sample Java project to build & test on runner
      run: |                                                   # https://github.com/redhat-actions/quarkus-quickstarts/tree/master/getting-started#readme
          #!/usr/bin/env bash


          export PATH="$PATH:/root/.dotnet/tools"


          echo "Starting scanning the project"

          dotnet sonarscanner begin /k:"AspNetCoreWebApi6"
          /d:sonar.host.url="https://sonarqube-sonarqube-sonarqube.apps.pesdev.hcscloud.net/"
          /d:sonar.login="sqa_bf1c123094ade02d1be8795da4e9921188acc5b3" /d:sonar.verbose=true
          /d:sonar.log.level="TRACE"
          /d:sonar.cs.vscoveragexml.reportsPaths="*.coveragexml"
          /d:sonar.cs.vstest.reportsPaths="*.trx"


          echo "Building the project"

          dotnet build AspNetCoreWebApi6.sln


          echo "Finishing scanning the project"

          dotnet sonarscanner end
          /d:sonar.login="sqa_bf1c123094ade02d1be8795da4e9921188acc5b3"
